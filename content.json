{"meta":{"title":"Divenire's Bolg","subtitle":"This is subtitle","description":"This is Website description","author":"Yue Qiu","url":"https://divenire.ltd","root":"/"},"pages":[{"title":"","date":"2020-12-02T05:18:09.485Z","updated":"2020-11-18T03:06:16.000Z","comments":true,"path":"404.html","permalink":"https://divenire.ltd/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2020-12-02T05:18:09.497Z","updated":"2020-11-18T03:07:02.000Z","comments":true,"path":"categories/index.html","permalink":"https://divenire.ltd/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-12-02T05:18:09.505Z","updated":"2020-11-18T03:07:40.000Z","comments":true,"path":"friends/index.html","permalink":"https://divenire.ltd/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"项目","date":"2020-12-02T05:18:09.515Z","updated":"2020-11-18T08:55:04.000Z","comments":true,"path":"project/index.html","permalink":"https://divenire.ltd/project/index.html","excerpt":"","text":""},{"title":"Page","date":"2013-12-26T22:52:56.000Z","updated":"2020-11-12T08:12:50.000Z","comments":true,"path":"page/index.html","permalink":"https://divenire.ltd/page/index.html","excerpt":"","text":"This is a page test."},{"title":"","date":"2020-12-02T05:18:09.491Z","updated":"2020-11-18T03:06:44.000Z","comments":true,"path":"about/index.html","permalink":"https://divenire.ltd/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有标签","date":"2020-12-02T05:18:09.526Z","updated":"2020-11-18T03:07:18.000Z","comments":true,"path":"tags/index.html","permalink":"https://divenire.ltd/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ch3-李群与李代数","slug":"SLAM/14讲/ch3-李群与李代数","date":"2020-12-09T21:44:25.000Z","updated":"2020-12-09T12:10:50.269Z","comments":true,"path":"2020/12/10/SLAM/14讲/ch3-李群与李代数/","link":"","permalink":"https://divenire.ltd/2020/12/10/SLAM/14%E8%AE%B2/ch3-%E6%9D%8E%E7%BE%A4%E4%B8%8E%E6%9D%8E%E4%BB%A3%E6%95%B0/","excerpt":"视觉SLAM14讲的课后习题以及深蓝的习题解答。 本节对应十四讲中的Ch4.","text":"视觉SLAM14讲的课后习题以及深蓝的习题解答。 本节对应十四讲中的Ch4. 深蓝的课后习题 群的性质 \\(\\{ {\\mathbb{Z},+}\\}\\)为群。 封闭性：\\(\\forall Z 1, Z 2 \\in \\mathbb{Z},(Z 1+Z 2) \\in \\mathbb{Z}\\)，即对于任意两个整数的加法仍为整数，满足条件。 结合律：\\(\\forall Z 1, Z 2, Z 3 \\in \\mathbb{Z},(Z 1+Z 2)+Z 3=Z 1+(Z 2+Z 3)\\)，满足条件。 幺元：\\(\\exists \\mathrm{Z} 0 \\in \\mathbb{Z}, \\mathrm{Z} 0=0, \\forall \\mathrm{Z} \\in \\mathrm{Z}, \\mathrm{Z}+0=0+\\mathrm{Z}=\\mathrm{Z}\\)，满足条件。 逆：\\(\\forall \\mathrm{Z} \\in \\mathbb{Z}, \\exists \\mathrm{Z}^{-1} \\in \\mathbb{Z}, \\mathrm{Z}^{-1}=-\\mathrm{Z}, \\mathrm{Z}+(-\\mathrm{Z})=0\\)，满足条件。 \\(\\{\\mathbb{N},+\\}\\)为不为群。 封闭性：与\\(\\{ {\\mathbb{Z},+}\\}\\)群同理，满足条件。 结合律：与\\(\\{ {\\mathbb{Z},+}\\}\\)群同理，满足条件。 幺元：与\\(\\{ {\\mathbb{Z},+}\\}\\)群同理，满足条件。 逆：不存在\\(\\forall \\mathrm{N} \\in \\mathbb{N}, \\exists \\mathrm{N}^{-1} \\in \\mathbb{N}, \\mathrm{N}^{-1}=-\\mathrm{N}, \\mathrm{N}+(-\\mathrm{N})=C\\)，不满足条件。 验证向量叉乘的李代数性质 证明： 验证：\\(\\mathfrak{g}=\\left(\\mathbb{R}^{3}, \\mathbb{R}, \\times\\right)\\)满足李代数的性质，设\\(\\boldsymbol {x}=(x_1, x_{2}, x_{3}),\\boldsymbol {y}=(y_1, y_{2}, y_{3}),\\boldsymbol {z}=(z_1, z_{2}, z_{3})\\),其中\\(\\boldsymbol {x,y,z} \\in \\mathbb{R}^{3} , x_i,y_i,z_i \\in R\\). 封闭性： \\[ [\\boldsymbol x,\\boldsymbol y] =\\left|\\begin{array}{lll} i &amp; j &amp; k \\\\ x_{1} &amp; x_{2} &amp; x_{3} \\\\ y_{1} &amp; y_{2} &amp; y_{3} \\end{array}\\right| = \\left[\\begin{array}{l} x_{2} y_{3}-x_{3} y_{2} \\\\ x_{3} y_{1}-x_{1} y_{3} \\\\ x_{1} y_{2}-x_{2} y_{1} \\end{array}\\right] \\in \\mathbb{R}^{3} \\] 满足封闭性。 双线性： \\[ [a \\boldsymbol{x}+b \\boldsymbol{y}, \\boldsymbol{z}]= (a \\boldsymbol{x}+b \\boldsymbol{y}) \\times \\boldsymbol{z}= a\\boldsymbol{x} \\times\\boldsymbol{z} + b\\boldsymbol{y} \\times\\boldsymbol{z}= a[\\boldsymbol{x}, \\boldsymbol{z}]+b[\\boldsymbol{y}, \\boldsymbol{z}] \\] \\[ [ \\boldsymbol{z},a \\boldsymbol{x}+b \\boldsymbol{y},]= \\boldsymbol{z} \\times(a \\boldsymbol{x}+b \\boldsymbol{y}) = a\\boldsymbol{z} \\times\\boldsymbol{x} + b\\boldsymbol{z} \\times\\boldsymbol{y}= a[\\boldsymbol{z}, \\boldsymbol{x}]+b[\\boldsymbol{z}, \\boldsymbol{y}] \\] 满足双线性。 自反性： \\[ [\\boldsymbol x,\\boldsymbol x]=\\left|\\begin{array}{lll} i &amp; j &amp; k \\\\ x_{1} &amp; x_{2} &amp; x_{3} \\\\ x_{1} &amp; x_{2} &amp; x_{3} \\end{array}\\right| =0 \\] 满足自反性。 雅可比等价： 由矢量的二重叉积公式$ $,进行化简可得： \\[ \\begin{aligned} &amp;\\quad [\\boldsymbol{x},[\\boldsymbol{y}, \\boldsymbol{z}]]+[\\boldsymbol{y},[\\boldsymbol{x}, \\boldsymbol{z}]]+[\\boldsymbol{z},[\\boldsymbol{x}, \\boldsymbol{y}]]\\\\&amp;= \\boldsymbol{(x \\cdot z)y-(y \\cdot z)x} + \\boldsymbol{(y \\cdot x)z-(z \\cdot x)y}+\\boldsymbol{(z \\cdot y)x-(x \\cdot y)z} \\\\ &amp;=0 \\end{aligned} \\] 证毕。 推导 SE(3) 的指数映射 证明： 已知： \\(\\boldsymbol{a}^{\\wedge} \\boldsymbol{a}^{\\wedge}=\\boldsymbol{a} \\boldsymbol{a}^{T}-\\boldsymbol{I}\\) \\(\\boldsymbol{a}^{\\wedge} \\boldsymbol{a}^{\\wedge} \\boldsymbol{a}^{\\wedge}=-\\boldsymbol{a}^{\\wedge}\\) \\[ \\begin{aligned} \\sum_{n=0}^{\\infty} \\frac{1}{(n+1) !}\\left(\\phi^{\\wedge}\\right)^{n} &amp;=I+\\frac{1}{2 !} \\theta \\boldsymbol{a}^{\\wedge}+\\frac{1}{3 !} \\theta^{2}\\left(\\boldsymbol{a}^{\\wedge}\\right)^{2}+\\frac{1}{4 !} \\theta^{3}\\left(\\boldsymbol{a}^{\\wedge}\\right)^{3}+\\frac{1}{5 !} \\theta^{4}\\left(\\boldsymbol{a}^{\\wedge}\\right)^{4} \\ldots \\\\ &amp;=\\frac{1}{\\theta}\\left(\\frac{1}{2 !} \\theta^{2}-\\frac{1}{4 !} \\theta^{4}+\\cdots\\right)\\left(\\boldsymbol{a}^{\\wedge}\\right)+\\frac{1}{\\theta}\\left(\\frac{1}{3 !} \\theta^{3}-\\frac{1}{5!} \\theta^{5}+\\cdots\\right)\\left(\\boldsymbol{a}^{\\wedge}\\right)^{2}+\\boldsymbol{I} \\\\ &amp;=\\frac{1}{\\theta}(1-\\cos \\theta)\\left(\\boldsymbol{a}^{\\wedge}\\right)+\\frac{\\theta-\\sin \\theta}{\\theta}\\left(\\boldsymbol{a} \\boldsymbol{a}^{T}-\\boldsymbol{I}\\right)+\\boldsymbol{I} \\\\ &amp;= \\frac{\\sin \\theta}{\\theta} \\boldsymbol{I}+\\left(1-\\frac{\\sin \\theta}{\\theta}\\right) \\boldsymbol{a} \\boldsymbol{a}^{\\mathrm{T} }+\\frac{1-\\cos \\theta}{\\theta} \\boldsymbol{a}^{\\wedge} {=} \\boldsymbol{J} \\end{aligned} \\] 证毕。 伴随 证明 ​ 对于任意的旋转矩阵\\(\\mathbf U\\),以及向量\\(\\mathbf{a,b}\\)有： \\[ ( \\mathbf{Ua}) \\times( \\mathbf{Ub})=\\mathbf U(\\mathbf{a} \\times \\mathbf{b}) \\] ​ 因此有： \\[ \\begin{aligned} \\boldsymbol{ (R p)^{\\wedge}v} &amp;= \\boldsymbol{R p \\times v }\\\\ &amp; = \\boldsymbol{R p \\times (RR^Tv) } \\\\ &amp; = \\boldsymbol{R (p\\times (R^Tv))}\\\\ &amp; = \\boldsymbol{Rp^{\\wedge}R^Tv} \\end{aligned} \\tag{1} \\] ​ 又由于： \\[ \\begin{aligned} e^{\\left(T^{-1} A T\\right)} &amp;=E+\\sum_{k=1}^{\\infty} \\frac{\\left(T^{-1} A T\\right)^{k} }{k !} \\\\ &amp;=E+\\sum_{k=1}^{\\infty} \\frac{T^{-1} A^{k} T}{k !} \\\\ &amp;=E+T^{-1}\\left(\\sum_{k=1}^{\\infty} \\frac{A^{k} }{k !}\\right) T \\\\ &amp;=T^{-1}\\left(e^{A}\\right) T \\end{aligned} \\] ​ 因此对(1)式两边取指数有： \\[ \\boldsymbol{R} \\exp \\left(\\boldsymbol{p}^{\\wedge}\\right) \\boldsymbol{R}^{\\mathrm{T} }=\\exp \\left((\\boldsymbol{R} \\boldsymbol{p})^{\\wedge}\\right) \\] ​ 得证。 Derivation of Adjoint for SO(3) 矩阵指数函数的性质与计算-学士学位论文-P15 轨迹的描绘 1、 ​ 机器人的运动轨迹\\(T_{W C}\\)是机器人坐标系相对于世界坐标系的位姿，其包含两个旋转部分和平移部分。 ​ 其中平移部分\\(t_{wc}\\)是从世界坐标系原点指向机器人坐标系原点的向量，在世界坐标系下的取值；其值等价于机器人坐标系原点在世界坐标系下的取值，即\\(\\boldsymbol t_{wc}\\)是机器人坐标系原点在世界坐标系下的坐标。 2、 ​ 见Github文件。 轨迹的误差 ​ 见Github文件。 课后习题 image-20201202170003497 image-20201202170057407 1、 ​ 2. ​ 深蓝的课后习题-&gt;验证向量叉乘的李代数性质 3. image-20201208220644357 4. image-20201208220718657 5&amp;6. ​ 深蓝课后习题-&gt;伴随 7. 1、 ​ 对\\(R\\)求取一次扰动\\(\\triangle R\\)，查看结果相对于扰动的变化率。设右扰动\\(\\triangle R\\)对应的李代数为\\(\\varphi\\). \\[ \\begin{aligned} \\frac{\\partial(\\mathbf{R} \\mathbf{p})}{\\partial \\varphi} &amp;=\\lim _{\\varphi \\rightarrow 0} \\frac{\\mathbf{R} \\exp \\left(\\varphi^{\\wedge}\\right) \\mathbf{p}-\\mathbf{R} \\mathbf{p} }{\\varphi} \\\\ &amp;=\\lim _{\\varphi \\rightarrow 0} \\frac{\\mathbf{R}\\left(\\mathbf{I}+\\varphi^{\\wedge}\\right) \\mathbf{p}-\\mathbf{R} \\mathbf{p} }{\\varphi} \\\\ &amp;=\\lim _{\\varphi \\rightarrow \\mathbf{0} } \\frac{\\mathbf{R} \\varphi^{\\wedge} \\mathbf{p} }{\\varphi}=\\lim _{\\varphi \\rightarrow 0} \\frac{-\\mathbf{R} \\mathbf{p}^{\\wedge} \\varphi}{\\varphi}=-\\mathbf{R} \\mathbf{p}^{\\wedge} \\end{aligned} \\] 2、 8. FIND_PACKAGE( &lt;name&gt; [version] [EXACT] [QUIET] [NO_MODULE] [ [ REQUIRED | COMPONENTS ] [ componets... ] ] ) ​ 比较常用的参数如下： 12345678910111213141516171819202122232425version参数需要一个版本号，它是正在查找的包应该兼容的版本号（格式是major[.minor[.patch[.tweak]]]）。EXACT选项要求版本号必须精确匹配。如果在find-module内部对该命令的递归调用没有给定[version]参数，那么[version]和EXACT选项会自动地从外部调用前向继承。对版本的支持目前只存在于包和包之间（详见下文）。QUIET 参数：会禁掉包没有被发现时的警告信息。对应于Find&lt;name&gt;.cmake模块中的 NAME_FIND_QUIETLY。REQUIRED 参数其含义是指是否是工程必须的，表示如果报没有找到的话，cmake的过程会终止，并输出警告信息。对应于Find&lt;name&gt;.cmake模块中的 NAME_FIND_REQUIRED 变量。COMPONENTS参数在REQUIRED选项之后，或者如果没有指定REQUIRED选项但是指定了COMPONENTS选项，在它们的后面可以列出一些与包相关（依赖）的部件清单（components list）示例：FIND_PACKAGE( libdb_cxx REQUIRED)这条命令执行后，CMake 会到变量 CMAKE_MODULE_PATH 指示的目录中查找文件 Findlibdb_cxx.cmake 并执行。 ​ 命令find_package共有两种工作模式：模型模式和配置模式。 指令模式 find_package() 命令会在模块路径中寻找 Find.cmake ，这是查找库的一个典型方式。首先CMake查看$&#123;CMAKE_MODULE_PATH&#125; 中的所有目录，然后再查看它自己的模块目录 /share/cmake-x.y/Modules/ 。 配置模式 **配置模式试图查找一个由待查找的包提供的配置文件的位置。包含该文件的路径会被存储在一个名为_DIR的条目李,如果在上述那些目录中没找到这样的文件，会寻找 Config.cmake 或者 -config.cmake ，它们是假定库会安装的文件（但是目前还没有多少库会安装它们）。不做检查，直接包含安装的库的固定值。** 参考 find_package与CMake如何查找链接库详解 cmake教程4(find_package使用)","categories":[{"name":"SLAM","slug":"SLAM","permalink":"https://divenire.ltd/categories/SLAM/"},{"name":"14讲","slug":"SLAM/14讲","permalink":"https://divenire.ltd/categories/SLAM/14%E8%AE%B2/"}],"tags":[]},{"title":"ch2-三维空间的刚体运动","slug":"SLAM/14讲/ch2-三维空间的刚体运动","date":"2020-11-29T21:44:25.000Z","updated":"2020-12-03T08:42:39.330Z","comments":true,"path":"2020/11/30/SLAM/14讲/ch2-三维空间的刚体运动/","link":"","permalink":"https://divenire.ltd/2020/11/30/SLAM/14%E8%AE%B2/ch2-%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%9A%E4%BD%93%E8%BF%90%E5%8A%A8/","excerpt":"视觉SLAM14讲的课后习题以及深蓝的习题解答。 本节对应十四讲中的Ch3.","text":"视觉SLAM14讲的课后习题以及深蓝的习题解答。 本节对应十四讲中的Ch3. 深蓝的课后习题 熟悉 Eigen 矩阵运算 一、 ​ 由于\\(A\\)是方阵，因此\\(Ax = b\\)有唯一解的的充分必要条件为：矩阵\\(A\\)的行列式\\(d=|A|\\neq0\\)(克拉默法则)。 ​ 从秩的角度来说有唯一解的条件是\\(Rank(A,b) = Rank(A)=n\\)。 二、 ​ 利用线性方程组的初等行变换进行消元、化简。对于\\(Ax=b\\)其核心思想是把A转换成一个三角矩阵，然后再进行正向代入法，或反向代入法求解。 三、 ​ 对于矩阵\\(A \\in \\mathbb{R}^{m \\times n}, m \\geq n\\)，其可被分解为\\(A=QR\\),其中： \\(Q \\in \\mathbb{R}^{m \\times m}\\) 是正交矩阵 \\(R \\equiv\\left[\\begin{array}{l}\\hat{R} \\\\ 0\\end{array}\\right] \\in \\mathbb{R}^{m \\times n}\\) \\(\\hat{R} \\in \\mathbb{R}^{n \\times n}\\) 是上三角矩阵 其基本原理为格拉姆-施密特正交化。 证明： 定义向量的投影： \\[ \\operatorname{proj}_{\\mathbf{u}} \\mathbf{a}=\\frac{\\langle\\mathbf{u}, \\mathbf{a}\\rangle}{\\langle\\mathbf{u}, \\mathbf{u}\\rangle} \\mathbf{u} \\] 其中\\({\\langle\\mathbf{u}, \\mathbf{a}\\rangle}\\)为向量的内积。 对于任意实方阵\\(\\mathbf{A}=(\\mathbf{a_1},\\mathbf{a_2},\\ldots,\\mathbf{a_n})\\),对其列向量进行Gram-Schmidt正交化可得一组正交基\\(\\mathbf{Q}=(\\mathbf{e_1},\\mathbf{e_2},\\ldots,\\mathbf{e_n})\\)。 参考图 ​ 因此进行正交化有： \\[ \\begin{array}{l} \\mathbf{u}_{1}=\\mathbf{a}_{1} \\\\ \\mathbf{u}_{2}=\\mathbf{a}_{2}-\\operatorname{proj}_{\\mathbf{u}_{1}} \\mathbf{a}_{2} \\\\ \\mathbf{u}_{3}=\\mathbf{a}_{3}-\\operatorname{proj}_{\\mathbf{u}_{1}} \\mathbf{a}_{3}-\\operatorname{proj}_{\\mathbf{u}_{2}} \\mathbf{a}_{3} \\\\ \\vdots \\\\ \\mathbf{u}_{k}=\\mathbf{a}_{k}-\\sum_{j=1}^{k-1} \\operatorname{proj}_{\\mathbf{u}_{j}} \\mathbf{a}_{k} \\end{array} \\] ​ 单位化可得： \\[ \\begin{aligned} \\mathbf{e}_{1} &amp;=\\frac{\\mathbf{u}_{1}}{\\left\\|\\mathbf{u}_{1}\\right\\|} \\\\ \\mathbf{e}_{2} &amp;=\\frac{\\mathbf{u}_{2}}{\\left\\|\\mathbf{u}_{2}\\right\\|} \\\\ \\mathbf{e}_{3} &amp;=\\frac{\\mathbf{u}_{3}}{\\left\\|\\mathbf{u}_{3}\\right\\|} \\\\ &amp; \\vdots \\\\ \\mathbf{e}_{k} &amp;=\\frac{\\mathbf{u}_{k}}{\\left\\|\\mathbf{u}_{k}\\right\\|} \\end{aligned} \\] ​ 此时方阵\\(\\mathbf{A}=(\\mathbf{a_1},\\mathbf{a_2},\\ldots,\\mathbf{a_n})\\)可表示为： \\[ \\begin{aligned} \\mathbf{a}_{1} &amp;=\\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{1}\\right\\rangle \\mathbf{e}_{1} \\\\ \\mathbf{a}_{2} &amp;=\\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{2}\\right\\rangle \\mathbf{e}_{1}+\\left\\langle\\mathbf{e}_{2}, \\mathbf{a}_{2}\\right\\rangle \\mathbf{e}_{2} \\\\ \\mathbf{a}_{3} &amp;=\\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{3}\\right\\rangle \\mathbf{e}_{1}+\\left\\langle\\mathbf{e}_{2}, \\mathbf{a}_{3}\\right\\rangle \\mathbf{e}_{2}+\\left\\langle\\mathbf{e}_{3}, \\mathbf{a}_{3}\\right\\rangle \\mathbf{e}_{3} \\\\ &amp;: \\\\ \\mathbf{a}_{k} &amp;=\\sum_{j=1}^{k}\\left\\langle\\mathbf{e}_{j}, \\mathbf{a}_{k}\\right\\rangle \\mathbf{e}_{j} \\end{aligned} \\] ​ 令： \\[ R=\\left(\\begin{array}{cccc} \\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{1}\\right\\rangle &amp; \\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{2}\\right\\rangle &amp; \\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{3}\\right\\rangle &amp; \\ldots \\\\ 0 &amp; \\left\\langle\\mathbf{e}_{2}, \\mathbf{a}_{2}\\right\\rangle &amp; \\left\\langle\\mathbf{e}_{2}, \\mathbf{a}_{3}\\right\\rangle &amp; \\ldots \\\\ 0 &amp; 0 &amp; \\left\\langle\\mathbf{e}_{3}, \\mathbf{a}_{3}\\right\\rangle &amp; \\ldots \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots \\end{array}\\right) \\] ​ 因此有： \\[ \\mathbf{A} = \\mathbf{QR}=(\\mathbf{e_1},\\mathbf{e_2},\\ldots,\\mathbf{e_n})\\left(\\begin{array}{cccc} \\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{1}\\right\\rangle &amp; \\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{2}\\right\\rangle &amp; \\left\\langle\\mathbf{e}_{1}, \\mathbf{a}_{3}\\right\\rangle &amp; \\ldots \\\\ 0 &amp; \\left\\langle\\mathbf{e}_{2}, \\mathbf{a}_{2}\\right\\rangle &amp; \\left\\langle\\mathbf{e}_{2}, \\mathbf{a}_{3}\\right\\rangle &amp; \\ldots \\\\ 0 &amp; 0 &amp; \\left\\langle\\mathbf{e}_{3}, \\mathbf{a}_{3}\\right\\rangle &amp; \\ldots \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots \\end{array}\\right)=(\\mathbf{a_1},\\mathbf{a_2},\\ldots,\\mathbf{a_n}). \\] ​ \\(\\mathbf{A} = \\mathbf{QR}\\)得证。 格拉姆-施密特正交化--QR分解法的来源 QR分解 四、 对于对称正定矩阵\\(A\\)，可以有\\(A=L L^{T}\\)。其基本原理为LU分解。 证明： 对于对称正定矩阵而言，可通过高斯消元法，得到唯一的Doolittle分解\\(A=LU\\). 将矩阵\\(U\\)的对角线提出有，\\(A=LD\\overline{U}\\),且\\(A\\)为对称矩阵有\\(LD\\overline{U}=\\overline{U^T}DL^T\\),由分解的唯一性可得，\\(\\overline{U^T}=L\\),可以得到\\(A=LDL^T\\). \\[ U=\\left[\\begin{array}{ccccccccc} d_{1} &amp; &amp; &amp; &amp; \\\\ &amp; d_{2} &amp; &amp; &amp; \\\\ &amp; &amp; \\ddots &amp; &amp; \\\\ &amp; &amp; &amp; \\ddots &amp; \\\\ &amp; &amp; &amp; &amp; d_{n} \\end{array}\\right]\\left[\\begin{array}{ccccc} 1 &amp; \\frac{*}{d_{1}} &amp; \\cdots &amp; \\cdots &amp; \\overline{d_{1}} \\\\ &amp; 1 &amp; \\frac{*}{d_{2}} &amp; \\cdots &amp; \\frac{*}{d_{2}} \\\\ &amp; &amp; 1 &amp; \\cdots &amp; \\cdots \\\\ &amp; &amp; &amp; \\ddots &amp; \\cdots \\\\ &amp; &amp; &amp; &amp; 1 \\end{array}\\right]=D \\overline{U} \\] 由\\(D=\\sqrt{D} \\cdot \\sqrt{D}\\)，\\(A=L D L^{T}=L \\sqrt{D} \\sqrt{D} L^{T}=L \\sqrt{D} \\sqrt{D}^{T} L^{T}=L \\sqrt{D}(L \\sqrt{D})^{T}\\)，证毕。 LU分解、LDLT分解、Cholesky分解 五、 img 源代码见Github的eigenDataType.cpp和eigenSolveMatrix.cpp. 参考Eigen解线性方程组 几何运算练习 答： 源代码见Github的coordinateTransform.cpp 旋转的表达 一、 已知\\(\\left(\\boldsymbol e_{1}, \\boldsymbol e_{2}\\dots \\boldsymbol e_{n}\\right)\\)为标准正交基，坐标系\\(\\left(\\boldsymbol e_{1}, \\boldsymbol e_{2}\\dots \\boldsymbol e_{n}\\right)\\)发生旋转后变为\\(\\left(\\boldsymbol b_{1}, \\boldsymbol b_{2}\\dots \\boldsymbol b_{n}\\right)\\),仍为标准正交基。 基向量互相垂直就是正交基，每个基向量的模为1就是标准正交基。 则旋转前后同一点的坐标可表示为 \\[ \\left[\\boldsymbol{e}_{1}, \\boldsymbol{e}_{2},\\dots \\boldsymbol{e}_{n}\\right] \\left[\\begin{array}{c} x_{1} \\\\ x_{2} \\\\ \\vdots \\\\ x_{n} \\end{array}\\right]= \\left[{b}_{1}, {b}_{2},\\dots {b}_{n}\\right] \\left[\\begin{array}{c} y_{1} \\\\ y_{2} \\\\ \\vdots \\\\ y_{n} \\end{array}\\right] \\] \\[ \\left[\\begin{array}{c} x_{1} \\\\ x_{2} \\\\ \\vdots \\\\ x_{n} \\end{array}\\right]= \\left[\\begin{array}{ccc} e_{1}^{T} b_{1} &amp;\\dots &amp; e_{1}^{T} b_{n} \\\\ \\vdots &amp;\\ddots&amp; \\vdots \\\\ e_{n}^{T} b_{1} &amp;\\dots &amp; e_{n}^{T} b_{n} \\end{array}\\right] \\left[\\begin{array}{c} y_{1} \\\\ y_{2} \\\\ \\vdots \\\\ y_{n} \\end{array}\\right]= R \\boldsymbol{y} \\] 则有： \\[ R^{T}R = \\left[\\begin{array}{ccc} b_{1}^{T} e_{1} &amp;\\dots &amp; b_{n}^{T} e_{1} \\\\ \\vdots &amp;\\ddots&amp; \\vdots \\\\ b_{1}^{T} e_{n} &amp;\\dots &amp; b_{n}^{T} e_{n} \\end{array}\\right] \\left[\\begin{array}{ccc} e_{1}^{T} b_{1} &amp;\\dots &amp; e_{1}^{T} b_{n} \\\\ \\vdots &amp;\\ddots&amp; \\vdots \\\\ e_{n}^{T} b_{1} &amp;\\dots &amp; e_{n}^{T} b_{n} \\end{array}\\right] \\] 对于对角线上的元素有： \\[ \\begin{aligned} R^{T}R(i,i) &amp;= b_{i}^{T} [\\sum_{j=1}^n e_{j}e_{j}^{T}]b_{i}\\\\ &amp;= b_{i}^{T} E b_{i} =1 \\end{aligned} \\] 非对角线上的元素有： \\[ \\begin{aligned} R^{T}R(i,j) &amp;= b_{i}^{T} [\\sum_{k=1}^n e_{k}e_{k}^{T}]b_{j}\\\\ &amp;= b_{i}^{T} E b_{j} =0 \\end{aligned} \\] 因此\\(R^{T}R =E\\). 上述公式表明，旋转矩阵\\(R\\)把n维空间中的一组标准正交基转化成另一组标准正交基,将两组标准正交基分别用矩阵\\(A\\)和\\(B\\)表示。 有\\(RA=B\\)，且\\(det(A) = det(B)=1\\),因此\\(det(R) = 1\\). 证毕。 二、 \\(dim(\\varepsilon) = 1, dim(\\eta) = 3\\) 三、 由教材P57-3.24式可知： \\[ q_{1} q_{2}=\\left[\\begin{array}{c} \\eta_{1} \\varepsilon_{2}+\\eta_{2} \\varepsilon_{1}+\\varepsilon_{1} × \\varepsilon_{2} \\\\ \\eta_{1} \\eta_{2}-\\varepsilon_{1}^{T} \\varepsilon_{2} \\end{array}\\right] \\] \\[ q_{1}^{+} q_{2}=\\left[\\begin{array}{cc} \\eta_{1} 1+\\varepsilon_{1}^{×} &amp; \\varepsilon_{1} \\\\ -\\varepsilon_{1}^{T} &amp; \\eta_{1} \\end{array}\\right]\\left[\\begin{array}{c} \\varepsilon_{2} \\\\ \\eta_{2} \\end{array}\\right]=\\left[\\begin{array}{c} \\varepsilon_{1} \\eta_{2}+\\left(\\eta_{1}+\\varepsilon_{1}^{×}\\right) \\varepsilon_{2} \\\\ \\eta_{1} \\eta_{2}-\\varepsilon_{1}^{T} \\varepsilon_{2} \\end{array}\\right]=\\left[\\begin{array}{c} \\eta_{2} \\varepsilon_{1}+\\eta_{1} \\varepsilon_{2}+\\varepsilon_{1}× \\varepsilon_{2} \\\\ \\eta_{1} \\eta_{2}-\\varepsilon_{1}^{T} \\varepsilon_{2} \\end{array}\\right]=q_{1} q_{2} \\] \\[ q_{2}^{\\oplus} q_{1}=\\left[\\begin{array}{cc} \\eta_{2} 1 - \\varepsilon_{2}^{×} &amp; \\varepsilon_{2} \\\\ -\\varepsilon_{2}^{T} &amp; \\eta_{2} \\end{array}\\right]\\left[\\begin{array}{c} \\varepsilon_{1} \\\\ \\eta_{1} \\end{array}\\right]= \\left[\\begin{array}{c} \\varepsilon_{1} \\eta_{2}+\\left(\\eta_{1}-\\varepsilon_{2}^{×}\\right) \\varepsilon_{1} \\\\ \\eta_{1} \\eta_{2}-\\varepsilon_{1}^{T} \\varepsilon_{2} \\end{array}\\right]=\\left[\\begin{array}{c} \\eta_{2} \\varepsilon_{1}+\\eta_{1} \\varepsilon_{2}+\\varepsilon_{1}× \\varepsilon_{2} \\\\ \\eta_{1} \\eta_{2}-\\varepsilon_{1}^{T} \\varepsilon_{2} \\end{array}\\right]=q_{1}q_{2} \\] 证毕。 罗德里格斯公式的证明 证明: 以上图为例子，矢量\\(\\boldsymbol r\\)绕着另一单位矢量\\(\\boldsymbol u\\) 转动角度\\(\\phi\\)，得到矢量\\(\\boldsymbol r’\\)。 \\[ \\overline{O^{\\prime} B}=\\boldsymbol{u} \\times \\boldsymbol{r} \\] 将矢量\\(\\boldsymbol r\\)分解为平行转轴与垂直转轴的分量，有：$r =r_{|}+r_{} $ \\[ \\begin{aligned} \\boldsymbol r_{\\|} &amp;=(\\boldsymbol r \\cdot \\boldsymbol{u}) \\boldsymbol{u} \\\\ \\boldsymbol r_{\\perp}&amp;=\\boldsymbol r - \\boldsymbol r_{\\|}=\\boldsymbol r -(\\boldsymbol r \\cdot \\boldsymbol{u}) \\boldsymbol{u} \\end{aligned} \\] 同理，对转动后的矢量进行分解与相似三角形原理有：\\(\\boldsymbol r^{\\prime}=\\boldsymbol r_{\\|}^{\\prime}+\\boldsymbol r_{\\perp}^{\\prime}\\) \\[ \\boldsymbol r_{\\|}^{\\prime} =\\boldsymbol r_{\\|} \\\\ \\] \\[ \\begin{aligned} \\boldsymbol r_{\\perp}^{\\prime} &amp;=\\overline{O^{\\prime} A} \\cos \\phi+\\overline{O^{\\prime} B} \\sin \\phi \\\\ &amp;=[\\boldsymbol r -(\\boldsymbol r \\cdot \\boldsymbol{u}) \\boldsymbol{u}] \\cos \\phi + \\boldsymbol u \\times \\boldsymbol r \\sin \\phi \\end{aligned} \\] 代入可得： \\[ \\begin{aligned} r^{\\prime} &amp;=\\boldsymbol r \\cos \\phi -(\\boldsymbol r \\cdot \\boldsymbol{u}) \\boldsymbol{u} \\cos \\phi + \\boldsymbol u \\times \\boldsymbol r \\sin \\phi \\end{aligned} \\] 对\\((\\boldsymbol r \\cdot \\boldsymbol{u}) \\boldsymbol{u}\\)化简有： \\[ (\\boldsymbol r \\cdot \\boldsymbol{u}) \\boldsymbol{u}=\\boldsymbol{u}(\\boldsymbol r \\cdot \\boldsymbol{u})=\\boldsymbol{u} \\boldsymbol{u^T}\\boldsymbol r \\] 因此： \\[ \\begin{aligned} r^{\\prime} &amp;=\\boldsymbol r \\cos \\phi -\\boldsymbol{u} \\boldsymbol{u^T}\\boldsymbol r \\cos \\phi + \\boldsymbol u \\times \\boldsymbol r \\sin \\phi \\\\ &amp;=[ \\cos \\phi\\boldsymbol I - \\cos \\phi\\boldsymbol{u} \\boldsymbol{u^T} + \\sin \\phi\\boldsymbol u \\times ]\\boldsymbol r\\\\ &amp;=\\boldsymbol R \\boldsymbol r \\end{aligned} \\] 得证。 参考 四元数运算性质的验证 ​ 本题主要是使用四元数进行旋转变换时候的代数关系原理以及与旋转矩阵之间的转换。 证明: 一、 ​ 设\\(\\boldsymbol p=(0,\\boldsymbol v)\\),旋转四元数\\(\\boldsymbol q = (\\eta, \\boldsymbol\\varepsilon)\\),则\\(\\boldsymbol q^{-1} = (\\eta, -\\boldsymbol\\varepsilon)\\)。 \\[ \\boldsymbol p&#39;= \\left[\\begin{array}{c} \\eta \\\\ \\boldsymbol \\varepsilon \\end{array}\\right] \\left[\\begin{array}{c} 0 \\\\ \\boldsymbol v \\end{array}\\right] \\left[\\begin{array}{c} \\eta \\\\ -\\boldsymbol \\varepsilon \\end{array}\\right]= \\left[\\begin{array}{c} \\eta \\boldsymbol v + \\boldsymbol \\varepsilon ×\\boldsymbol v \\\\ -\\boldsymbol \\varepsilon^{T} \\boldsymbol v \\end{array}\\right] \\left[\\begin{array}{c} \\eta \\\\ -\\boldsymbol \\varepsilon \\end{array}\\right] \\] ​ 其结果的实部为$v^{T} -^{T} v =0 $.因此旋转后的点为虚四元数。 二、 ​ 由题意： \\[ \\begin{aligned} p^{\\prime} &amp;=q p q^{-1} \\\\ &amp;=q^{+} p^{+} q^{-1} \\\\ &amp;=q^{+} q^{-1^{\\oplus}} p \\\\ \\therefore Q &amp;=q^{+} q^{-1^{\\oplus}} \\end{aligned} \\] ​ 展开可得： \\[ q^{+}=\\left[\\begin{array}{cc} \\eta+\\epsilon^{\\times} &amp; \\varepsilon \\\\ -\\varepsilon^{T} &amp; \\eta \\end{array}\\right]=\\left[\\begin{array}{cccc} w &amp; -z &amp; y &amp; x \\\\ z &amp; w &amp; -x &amp; y \\\\ -y &amp; x &amp; w &amp; z \\\\ -x &amp; -y &amp; -z &amp; w \\end{array}\\right] \\] \\[ q^{-1^{\\ominus}}=\\left[\\begin{array}{cc} \\eta 1-(-\\varepsilon)^{\\times} &amp; -\\varepsilon \\\\ -(-\\varepsilon)^{T} &amp; \\eta \\end{array}\\right] /\\|q\\|^{2}=\\frac{1}{\\|q\\|^{2}} \\cdot\\left[\\begin{array}{cc} \\eta 1+\\varepsilon^{\\times} &amp; -\\varepsilon \\\\ \\varepsilon^{T} &amp; \\eta \\end{array}\\right]=\\frac{1}{\\|q\\|^{2}} \\cdot\\left[\\begin{array}{cccc} w &amp; -z &amp; y &amp; -x \\\\ z &amp; w &amp; -x &amp; -y \\\\ -y &amp; x &amp; w &amp; -z \\\\ x &amp; y &amp; z &amp; w \\end{array}\\right] \\] \\[ \\begin{aligned} Q&amp;=q^{+} q^{-1^{\\oplus}}\\\\ &amp;= \\frac{1}{\\|q\\|^{2}} \\left[\\begin{array}{cccc} w^{2}+x^{2}-y^{2}+z^{2} &amp; 2 x y-2 z w &amp; 2 w y+2 x z &amp; 0 \\\\ 2 x y+2 z w &amp; w^{2}-x^{2}+y^{2}-z^{2} &amp; 2 y z-2 x w &amp; 0 \\\\ 2 x z-2 y w &amp; 2 y z+2 x w &amp; w^{2}-x^{2}-y^{2}+z^{2} &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; w^{2}+x^{2}+y^{2}+z^{2} \\end{array}\\right] \\end{aligned} \\] 熟悉 C++11 ​ 答案： 在15行中，vector&lt;A&gt; avec&#123;a1, a2, a3&#125;使用列表进行vector对象的初始化。 在16行中，[](const A&amp;a1, const A&amp;a2) &#123;return a1.index&lt;a2.index;&#125;为匿名lambda 表达式，实现avec 数组排序从小到大输出。 在17行中，for ( auto&amp; a: avec ) 包含了auto自动类型推导和基于范围的for循环. 课后习题 image-20201202195446946 1. ​ 见深蓝的课后习题《旋转的表达-1》 2. ​ 见深蓝的课后习题《罗德里格斯公式的证明》 3. ​ 见深蓝的课后习题《四元数运算性质的验证》 4. Todo ​ 各种旋转表示法总结 5. ​ 使用Block. 12345678910111213141516 //提取矩阵的一部分的子矩阵，从一个很大的矩阵中，提取出右上角的2x2矩阵，然后赋值为I // 生成随机矩阵和随机向量 #define MATRIX_SIZE 6 Eigen::Matrix&lt;double, MATRIX_SIZE, MATRIX_SIZE&gt; matrix_NN = Eigen::MatrixXd::Random(MATRIX_SIZE, MATRIX_SIZE); std::cout&lt;&lt;&quot;-------------习题-------------&quot;&lt;&lt;std::endl; std::cout&lt;&lt;matrix_NN&lt;&lt;std::endl&lt;&lt;std::endl;// Method 1 位操作// for (int i = MATRIX_SIZE-2; i &lt; MATRIX_SIZE; i++)// &#123;// for (int j = MATRIX_SIZE-2; j &lt; MATRIX_SIZE; j++)// matrix_NN(i,j) = 1;// &#125;// Method 2 块操作 matrix_NN.block&lt;2,2&gt;(0,4) = Eigen::Matrix2d::Identity(2,2); std::cout&lt;&lt;matrix_NN&lt;&lt;std::endl; 源代码见Github的eigenDataType.cpp 6. ​ 见深蓝的课后习题《熟悉Eigen矩阵运算-5》 源代码见Github的eigenSolveMatrix.cpp","categories":[{"name":"SLAM","slug":"SLAM","permalink":"https://divenire.ltd/categories/SLAM/"},{"name":"14讲","slug":"SLAM/14讲","permalink":"https://divenire.ltd/categories/SLAM/14%E8%AE%B2/"}],"tags":[]},{"title":"ch1-概述与预备知识","slug":"SLAM/14讲/ch1-概述与预备知识","date":"2020-11-28T21:44:25.000Z","updated":"2020-12-03T08:10:04.145Z","comments":true,"path":"2020/11/29/SLAM/14讲/ch1-概述与预备知识/","link":"","permalink":"https://divenire.ltd/2020/11/29/SLAM/14%E8%AE%B2/ch1-%E6%A6%82%E8%BF%B0%E4%B8%8E%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/","excerpt":"视觉SLAM14讲的课后习题以及深蓝的习题解答。 本节对应十四讲中的Ch1和Ch2.","text":"视觉SLAM14讲的课后习题以及深蓝的习题解答。 本节对应十四讲中的Ch1和Ch2. 深蓝的课后习题 熟悉Linux 熟悉Linux 1. 如何在 Ubuntu 中安装软件(命令行界面)?它们通常被安装在什么地方? apt安装方式，从系统软件源获取。 123sudo apt install packge-name# 修复安装，如果遇到安装失败，或者报错可以尝试用这个命令sudo apt -f install packge-name deb软件包安装 1234561.使用dpkg 不自动处理依赖sudo dpkg -i packge-name.debsudo apt install -f2.gdebi 自动处理依赖sudo gdebi packge-name.deb rpm安装 1234# 将rpm文件转为deb文件sudo alien packge-name.rpm# dpkg命令安装sudo dpkg -i packge-name.deb 其他安装方式 12执行解压后文件夹的安装文件sudo .&#x2F;软件名* 安装后软件默认位置 /usr/share 可执行文件位置 /usr/bin 库文件位置 /usr/lib 2. linux 的环境变量是什么?我如何定义新的环境变量? 环境变量是用来指定系统运行环境的一些参数，比如我们使用命令的路径，系统颜色等。 常见环境变量如下所示： PATH：决定了shell将到哪些目录中寻找命令或程序 HOME：当前用户主目录 MAIL：是指当前用户的邮件存放目录。 SHELL：是指当前用户用的是哪种Shell。 HISTSIZE：是指保存历史命令记录的条数 LOGNAME：是指当前用户的登录名。 HOSTNAME：是指主机的名称，许多应用程序如果要用到主机名的话，通常是从这个环境变量中来取得的。 LANG/LANGUGE：是和语言相关的环境变量，使用多种语言的用户可以修改此环境变量。 PS1：是基本提示符，对于root用户是#，对于普通用户是$。 PS2：是附属提示符，默认是“&gt;”。可以通过修改此环境变量来修改当前的命令符，比如下列命令会将提示符修改成字符串“Hello,MyNewPrompt:)”。 以环境变量PATH为例 12定义新的变量/home/divenire/Gamsexport PATH=/home/divenire/Gams:$PATH 这种方式立即生效，但作用范围仅限当前终端，一旦当前终端关闭或在另一个终端中，则无效。 因此也可以选择修改环境变量配置文件。 环境变量配置文件中主要是定义对系统操作环境生效的系统默认环境变量，如PATH等；PATH、HISTSIZE、PS1、HOSTNAME等环境变量写入对应的环境变量配置文件； 以环境变量PATH为例，修改对应的用户级环境变量配置文件 123456sudo gedit ~/.profile#在文件末端加入export PATH=/home/divenire/Gams:$PATH#保存，更新source ~/.profile 3. linux 根目录下面的目录结构是什么样的?至少说出 3 个目录的用途。 tree -L 1根目录下目录结构如图所示。 image-20200919173309565 ./media 挂载可移动介质(media)，诸如CD、数码相机等用于挂载可移动设备的临时目录 ./bin 重要的二进制 (binary) 应用程序,包含二进制文件，系统的所有用户使用的命令都在这个目录下。 ./etc 配置文件、启动脚本等(etc)包含所有程序所需的配置文件，也包含了用于启动/停止单个程序的启动和关闭shell脚本 4. 假设我要给 a.sh 加上可执行权限,该输入什么命令? 1sudo chmod +x a.sh 5. 假设我要将 a.sh 文件的所有者改成 xiang:xiang,该输入什么命令? 1chown xiang:xiang a.sh SLAM文献阅读 SLAM文献阅读 1. SLAM 会在哪些场合中用到?至少列举三个方向。 三维重建，AR，VR 无人驾驶 移动机器人的自主导航与定位 2. SLAM 中定位与建图是什么关系?为什么在定位的同时需要建图? ​ 定位与建图是相互耦合的关系，只有明确了当前所在的位置，才能建立出准确的地图地图，反之只有在拥有准确地图的情况下，才能够根据周围的环境准确的判断出自身所在的位置。 ​ SLAM中采用上一个时刻的地图来估计此刻的位姿，并利用当前位姿更新地图，如此循环来解决定位与建图的问题。因此在定位的同时需要建地图。 3. SLAM 发展历史如何?我们可以将它划分成哪几个阶段? 古典时代（1986-2004年）经典时代引入了SLAM的主要概率公式，包括基于扩展卡尔曼滤波器、RaoBlackwelled粒子滤波器和最大似然估计的方法 。 算法分析时代（2004-2015年）算法分析阶段研究了SLAM的基本性质，包括可观测性、收敛性和一致性 。 我们正在进入SLAM的第三个时代，即鲁棒感知时代。 4. 列举三篇在 SLAM 领域的经典文献。 ORB-SLAM2:Mur-Artal R , Tardos J D . ORB-SLAM2: An Open-Source SLAM System for Monocular,Stereo, and RGB-D Cameras[J]. IEEE Transactions on Robotics, 2017:1-8. semi-direct visual odometry Large-Scale Direct Monocular SLAM CMake练习 image-20201126124020051 工程文件结构如下所示。 image-20200920110302876 12345678910111213141516171819202122cmake_minimum_required(VERSION 2.8)SET(CMAKE_BUILD_TYPE &quot;Release&quot;)project(HELLO)# 添加头文件include_directories( $&#123;PROJECT_SOURCE_DIR&#125;/include)#添加可执行文件ADD_EXECUTABLE(sayhello $&#123;PROJECT_SOURCE_DIR&#125;/src/useHello.cpp)#添加库 并链接add_library($&#123;PROJECT_NAME&#125; SHARED src/hello.cpp)TARGET_LINK_LIBRARIES(sayhello $&#123;PROJECT_NAME&#125;)#设置库文件输出路径set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/lib)#installINSTALL(TARGETS $&#123;PROJECT_NAME&#125; LIBRARY DESTINATION /usr/local/lib)INSTALL(FILES $&#123;PROJECT_SOURCE_DIR&#125;/include/hello.h DESTINATION /usr/local/include) 运行截图 image-20200920111430221 image-20200920111531133 image-20200920111335182 image-20200920111556695 理解ORBSLAM框架 image-20201126124134268 (a) ORB-SLAM2 将编译出什么结果?有几个库文件和可执行文件? image-20200920093332487 生成3个库文件 lib/libORB_SLAM2.so Thirdparty/g2o/lib /libg2o.so Thirdparty/DBoW2/lib/libDBoW2.so 6个可执行文件 Examples/Monocular/mono_euroc Examples/Monocular/mono_kitti Examples/Monocular/mono_tum Examples/RGB-D/rgbd_tum Examples/Stereo/stereo_euroc Examples/Stereo/stereo_kitti (b) ORB-SLAM2 中的 include, src, Examples 三个文件夹中都含有什么内容? include文件夹中是ORB-SLAM2库的头文件; src文件夹中是是ORB-SLAM2库的源文件； Example文件夹中包含单目，RGBD，双目以及ROS的实例工程代码文件和相机参数文件，以及编译后的文件都保存在这儿。 (c) ORB-SLAM2 中的可执行文件链接到了哪些库?它们的名字是什么? lib/libORB_SLAM2.so ORB-SLAM2的库。 Thirdparty/g2o/lib /libg2o.so g2o优化库，为第三方库文件。 Thirdparty/DBoW2/lib/libDBoW2.so DboW2回环检测库，为第三方库文件。 摄像头运行ORB-SLAM CMakeLists 修改方案。在工程目录下的CMakeLists.txt末尾加入如下代码。 123456set(CMAKE_RUNTIME_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/Examples/myvideo)add_executable(myvideo Examples/myvideo/myvideo.cpp)target_link_libraries(myvideo $&#123;PROJECT_NAME&#125;)add_executable(myslam Examples/myvideo/myslam.cpp)target_link_libraries(myslam $&#123;PROJECT_NAME&#125;) 使用电脑摄像头运行ORB-SLAM 运行截图如下。 image-20200920151100860 使用视频运行ORB-SLAM 运行截图如下 image-20200920113608240 课后习题 第一章 image-20201202163749037 1 ​ 对于\\(A_{m*n}X=b\\) ​ 有解的条件是：增广矩阵的秩 等于 系数矩阵的秩，既\\(Rank(A,b) = Rank(A)\\). ​ 有唯一解的条件是\\(Rank(A,b) = Rank(A)=n\\) 3 ​ 在一维情况下，高斯概率密度函数表示为: \\[ p\\left(x \\mid \\mu, \\sigma^{2}\\right)=\\frac{1}{\\sqrt{2 \\pi \\sigma^{2}}} \\exp \\left(-\\frac{1}{2} \\frac{(x-\\mu)^{2}}{\\sigma^{2}}\\right) \\] ​ 其中 \\(\\mu\\) 称为均值 (mean), \\(\\sigma^{2}\\) 为方差 (variance), \\(\\sigma\\) 称为标准差 (standard deviation)。 ​ 多维变量的高斯分布如下 \\[ p(x \\mid \\mu, \\Sigma)=\\frac{1}{\\sqrt{(2 \\pi)^{N} \\operatorname{det} \\Sigma}} \\exp \\left(-\\frac{1}{2}(x-\\mu)^{\\mathrm{T}} \\Sigma^{-1}(x-\\mu)\\right) \\] ​ 其中 \\(\\mu \\in \\mathbb{R}^{N}\\) 是均值, \\(\\Sigma \\in \\mathbb{R}^{N \\times N}\\) 是协方差矩阵（对称正定矩阵） 第二章 IMG_20201202_164639 1 Nop 2 Nop 6 ​ 会出现undefined reference错误； image-20201126202731716 8 lib 12345678工程目录.├── CMakeLists.txt├── inc│ └── libHelloSLAM.h├── install.sh└── src └── libHelloSLAM.cpp 12345678910111213141516171819202122232425262728# 声明要求的 cmake 最低版本cmake_minimum_required(VERSION 2.8)# 声明一个 cmake 工程project(hello)# 设置编译模式set(CMAKE_BUILD_TYPE Release)############################################################# Create a library############################################################# 动态库#Generate the shared library from the library sourcesadd_library(hello SHARED src/libHelloSLAM.cpp)target_include_directories(hello PUBLIC $&#123;PROJECT_SOURCE_DIR&#125;/inc)############################################################# Install############################################################# Library# Note: may not work on windowsinstall (TARGETS hello LIBRARY DESTINATION lib)# Header filesinstall(DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/inc/ DESTINATION include) project 1234567#工程目录.├── CMakeLists.txt├── cmake_modules│ └── Findhello.cmake├── run.sh└── useHello.cpp 123456789101112131415#CMakeLists.txt# 声明要求的 cmake 最低版本cmake_minimum_required(VERSION 2.8)# 声明一个 cmake 工程project(HelloSlam)# 设置编译模式set(CMAKE_BUILD_TYPE Release)set(CMAKE_MODULE_PATH &quot;$&#123;PROJECT_SOURCE_DIR&#125;/cmake_modules&quot;)# 寻找库文件find_package(hello REQUIRED)include_directories($&#123;HELLO_INCLUDE_DIR&#125;)# 添加可执行文件add_executable(HelloSlam useHello.cpp)target_link_libraries($&#123;PROJECT_NAME&#125; $&#123;HELLO_LIBRARY&#125;)message(&quot;include dir:$&#123;HELLO_INCLUDE_DIR&#125; lib dir:$&#123;HELLO_LIBRARY&#125; &quot;) 1234567891011121314151617# Findhello.cmake# 在指定目录下寻找头文件和动态库文件的位置，可以指定多个目标路径# Find the header filesFIND_PATH(HELLO_INCLUDE_DIR NAMES libHelloSLAM.hPATHS /usr/local/include /usr/include)# Find lib FIND_LIBRARY(HELLO_LIBRARYNAMES helloPATHS /usr/local/lib /usr/lib)if (HELLO_INCLUDE_DIR AND HELLO_LIBRARY) set(HELLO_FOUND TRUE)endif (HELLO_INCLUDE_DIR AND HELLO_LIBRARY) 工程文件见:Github 参考 linux中环境变量及环境变量配置文件详解 Linux环境变量文件介绍 Linux添加新的环境变量 Linux根目录下各个目录的用途及含义","categories":[{"name":"SLAM","slug":"SLAM","permalink":"https://divenire.ltd/categories/SLAM/"},{"name":"14讲","slug":"SLAM/14讲","permalink":"https://divenire.ltd/categories/SLAM/14%E8%AE%B2/"}],"tags":[]},{"title":"ORB-SLAM2环境配置","slug":"SLAM/ORB-SLAM2/ORB-SLAM2环境配置","date":"2020-11-28T15:57:22.000Z","updated":"2020-11-30T03:45:18.000Z","comments":true,"path":"2020/11/28/SLAM/ORB-SLAM2/ORB-SLAM2环境配置/","link":"","permalink":"https://divenire.ltd/2020/11/28/SLAM/ORB-SLAM2/ORB-SLAM2%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","excerpt":"ORB-SLAM2的环境配置。","text":"ORB-SLAM2的环境配置。 EIGEN 卸载原有的Eigen版本 123456789101112131415#查看原有的Eiegn位置sudo updatedb locate eigen3 #卸载sudo rm -rf /usr/include/eigen3sudo rm -rf /usr/lib/cmake/eigen3sudo rm -rf /usr/local/include/eigen3sudo rm -rf /usr/share/doc/libeigen3-dev sudo rm -rf /usr/local/share/eigen3sudo rm -rf /usr/local/share/pkgconfig/eigen3.pc /usr/share/pkgconfig/eigen3.pc /var/lib/dpkg/info/libeigen3-dev.list /var/lib/dpkg/info/libeigen3-dev.md5sums#重新查看Eiegn位置sudo updatedb locate eigen3 安装Eigen3.3.8 123456cmake -H. -Bbuildcd buildsudo make install# eigen安装默认的地址是：/usr/local/include里 ，我们在安装pangolin时，会在/usr/include 目录下进行搜索eigen，导致pangolin安装失败，通常我们复制一份在、usr/include上面命令可以解决:sudo cp -r /usr/local/include/eigen3 /usr/include 修改FindEigen.Cmake文件，实现多版本共存 12345find_path(EIGEN3_INCLUDE_DIR NAMES signature_of_eigen3_matrix_libraryPATHS# 写eigen的路径/media/divenire/D/0_Divenire/Workspace/LIB/EIGEN/eigen-3.3.8) OPENCV OEPNCV 3.4.12 下载、安装 12345# 临时代理export http_proxy=&quot;http://127.0.0.1:12333&quot;export https_proxy=&quot;http://127.0.0.1:12333&quot;# 使用wgetwget opencv_address 编译 12cmake -H. -Bbuildcmake --build build -j12 修改CMakeList 指定OPENCV版本和路径 123#设置到自己的OPENCV路径set(OpenCV_DIR &quot;/media/divenire/D/0_Divenire/Workspace/LIB/OPENCV/3.4.12/opencv-3.4.12/builds&quot;)find_package(OpenCV REQUIRED) PANGOLIN 下载PANGOLIN 编译 12cmake -H. -Bbuildcmake --build build -j12 修改CMakeList 指定PANGOLIN版本和路径 123#设置到自己的PANGOLIN路径set(Pangolin_DIR &quot;/media/divenire/D/0_Divenire/Workspace/LIB/Pangolin/build/src&quot;)find_package(Pangolin REQUIRED) ORBSLAM2 编译 最好分开编译，先编译第三方的文件夹的G2O那些库(修改编译第三方库的Cmake配置)。 1./build.sh 数据集 单目&amp;双目 123# 解压下载的数据集# 把TUMX换成对应的相机参数设置./Examples/Monocular/mono_tum ./Vocabulary/ORBvoc.txt ./Examples/Monocular/TUMX.yaml &#123;数据集路径(解压后的文件夹)&#125; RGB-D 1234# 建立关联python associate.py PATH_TO_SEQUENCE/rgb.txt PATH_TO_SEQUENCE/depth.txt &gt; associations.txt# 把TUMX换成对应的相机参数设置./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUMX.yaml PATH_TO_SEQUENCE_FOLDER ASSOCIATIONS_FILE 摄像头&amp;视频 CMakeLists 修改方案。在工程目录下的CMakeLists.txt末尾加入如下代码。 123456set(CMAKE_RUNTIME_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/Examples/myvideo)add_executable(myvideo Examples/myvideo/myvideo.cpp)target_link_libraries(myvideo $&#123;PROJECT_NAME&#125;)add_executable(myslam Examples/myvideo/myslam.cpp)target_link_libraries(myslam $&#123;PROJECT_NAME&#125;) 摄像头 1./Examples/myvideo/myslam ./Vocabulary/ORBvoc.txt ./Examples/myvideo/myslam.yaml 视频 1./Examples/myvideo/myvideo ./Vocabulary/ORBvoc.txt ./Examples/myvideo/myvideo.yaml Examples/myvideo/myvideo.mp4 参考 TUM工具-误差评估-关联","categories":[{"name":"SLAM","slug":"SLAM","permalink":"https://divenire.ltd/categories/SLAM/"},{"name":"ORB-SLAM2","slug":"SLAM/ORB-SLAM2","permalink":"https://divenire.ltd/categories/SLAM/ORB-SLAM2/"}],"tags":[]},{"title":"测试","slug":"测试","date":"2020-11-18T17:05:00.000Z","updated":"2020-11-24T03:12:02.000Z","comments":true,"path":"2020/11/19/测试/","link":"","permalink":"https://divenire.ltd/2020/11/19/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"测试文章 \\[ THIS \\\\ is \\\\a \\\\math \\ expression \\]","categories":[{"name":"Cate","slug":"Cate","permalink":"https://divenire.ltd/categories/Cate/"},{"name":"SubCate","slug":"Cate/SubCate","permalink":"https://divenire.ltd/categories/Cate/SubCate/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://divenire.ltd/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://divenire.ltd/tags/Blog/"}]},{"title":"非线性优化1--高斯牛顿法","slug":"数学/非线性优化/非线性优化1——高斯牛顿法","date":"2020-11-12T15:57:22.000Z","updated":"2020-11-24T03:17:42.000Z","comments":true,"path":"2020/11/12/数学/非线性优化/非线性优化1——高斯牛顿法/","link":"","permalink":"https://divenire.ltd/2020/11/12/%E6%95%B0%E5%AD%A6/%E9%9D%9E%E7%BA%BF%E6%80%A7%E4%BC%98%E5%8C%96/%E9%9D%9E%E7%BA%BF%E6%80%A7%E4%BC%98%E5%8C%961%E2%80%94%E2%80%94%E9%AB%98%E6%96%AF%E7%89%9B%E9%A1%BF%E6%B3%95/","excerpt":"高斯牛顿法的推导与应用实例。","text":"高斯牛顿法的推导与应用实例。 推导 ​ 假设观测到 \\(\\mathrm{N}\\) 个数据点 \\(\\left\\{\\left(x_{1}, y_{1}\\right),\\left(x_{2}, y_{2}\\right), \\ldots,\\left(x_{N}, y_{N}\\right)\\right\\},\\) 其中 \\(x \\in \\mathbb{R}^{M}\\) 。希望找到包含 \\(\\mathrm{M}\\) 个参数的非线性函数 \\(f\\left(x, a_{1}, a_{2}, \\ldots, a_{M}\\right),\\) 拟合上述N个数据点。 ​ 为了方便书写, 记: \\(\\quad f_{1}(\\mathbf{a})=f\\left(x_{1}, a_{1}, \\ldots a_{M}\\right)_{\\circ}\\) 则最小二乘的目标函数为: \\[ \\varepsilon(\\mathbf{a})=\\sum_{i=1}^{N}\\left\\|f_{i}(\\mathbf{a})-y_{i}\\right\\|^{2} \\tag{1} \\] ​ 我们需要找到 \\(\\mathbf{a}=\\left[a_{1}, a_{2}, \\ldots, a_{M}\\right]^{T},\\) 使得(1) 的值最小。将 (1) 对 \\(\\mathbf{a}_{j}\\) 求导: \\[ \\frac{\\partial \\varepsilon(\\mathbf{a})}{a_{j}}=\\sum_{i=1}^{N} 2\\left(f_{i}(\\mathbf{a})-y_{i}\\right) \\cdot \\frac{\\partial f_{i}(\\mathbf{a})}{\\partial a_{j}} \\tag{2} \\] ​ 因此可得\\(\\varepsilon(\\mathbf{a})\\)的梯度为：\\(\\nabla \\varepsilon(\\mathbf{a}) =\\left[\\frac{\\partial \\varepsilon(\\mathbf{a})}{a_{1}}, \\frac{\\partial \\varepsilon(\\mathbf{a})}{a_{2}}, \\ldots, \\frac{\\partial \\varepsilon(\\mathbf{a})}{a_{M}}\\right]^{T}\\). \\[ \\nabla \\varepsilon(\\mathbf{a}) = \\left[\\begin{array}{cccc} \\frac{\\partial f_{1}(\\mathbf{a})}{\\partial a_{1}} &amp; \\frac{\\partial f_{2}(\\mathbf{a})}{\\partial a_{1}} &amp; \\cdots &amp; \\frac{\\partial f_{N}(\\mathbf{a})}{\\partial a_{1}} \\\\ \\frac{\\partial f_{1}(\\mathbf{a})}{\\partial a_{2}} &amp; \\frac{\\partial f_{2}(\\mathbf{a})}{\\partial a_{2}} &amp; \\cdots &amp; \\frac{\\partial f_{N}(\\mathbf{a})}{\\partial a_{2}} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\frac{\\partial f_{1}(\\mathbf{a})}{\\partial a_{M}} &amp; \\frac{\\partial f_{2}(\\mathbf{a})}{\\partial a_{2}} &amp; \\cdots &amp; \\frac{\\partial f_{N}(\\mathbf{a})}{\\partial a_{M}} \\end{array}\\right] \\times \\left[\\begin{array}{cccc} f_{1}(\\mathbf{a})-y_{1} \\\\ f_{2}(\\mathbf{a})-y_{2} \\\\ \\vdots \\\\ f_{N}(\\mathbf{a})-y_{N} \\end{array}\\right] \\] ​ 且有： \\[ \\mathbf{J}_i = \\left[\\frac{\\partial f_{i}(\\mathbf{a})}{\\partial a_{1}}, \\frac{\\partial f_{i}(\\mathbf{a})}{\\partial a_{2}}, \\ldots, \\frac{\\partial f_{i}(\\mathbf{a})}{\\partial a_{M}}\\right]^{T} \\mathbf{r}=\\left[\\begin{array}{c} f_{1}(\\mathbf{a})-y_{1} \\\\ f_{2}(\\mathbf{a})-y_{2} \\\\ \\vdots f_{N}(\\mathbf{a})-y_{N} \\end{array}\\right]\\\\ \\] \\[ \\mathbf{J} = \\left[\\begin{array}{cccc} \\frac{\\partial f_{1}(\\mathbf{a})}{\\partial a_{1}} &amp; \\frac{\\partial f_{2}(\\mathbf{a})}{\\partial a_{1}} &amp; \\cdots &amp; \\frac{\\partial f_{N}(\\mathbf{a})}{\\partial a_{1}} \\\\ \\frac{\\partial f_{1}(\\mathbf{a})}{\\partial a_{2}} &amp; \\frac{\\partial f_{2}(\\mathbf{a})}{\\partial a_{2}} &amp; \\cdots &amp; \\frac{\\partial f_{N}(\\mathbf{a})}{\\partial a_{2}} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\frac{\\partial f_{1}(\\mathbf{a})}{\\partial a_{M}} &amp; \\frac{\\partial f_{2}(\\mathbf{a})}{\\partial a_{2}} &amp; \\cdots &amp; \\frac{\\partial f_{N}(\\mathbf{a})}{\\partial a_{M}} \\end{array}\\right] = \\left[\\mathbf{J}_1, \\mathbf{J}_2, \\ldots, \\mathbf{J}_N\\right]^{T}\\\\ \\] ​ 因此写成向量形式有： \\[ \\nabla \\varepsilon(\\mathbf{a})=2 \\mathbf{J}^{}\\left[\\begin{array}{c} \\left(f_{1}(\\mathbf{a})-y_{1}\\right) \\\\ \\vdots \\\\ \\left(f_{N}(\\mathbf{a})-y_{N}\\right) \\end{array}\\right]=2 \\mathbf{J}^{} \\cdot(\\vec{f}(\\mathbf{a})-\\vec{y}) \\] ​ 根据迭代方法找到\\(\\mathbf{a}_{n+1}\\)使得上式等于0，因此有： \\[ \\begin{aligned} \\nabla \\varepsilon\\left(\\mathbf{a}_{n+1}\\right) &amp;=2 \\mathbf{J}^{}\\left(\\vec{f}\\left(\\mathbf{a}_{n+1}\\right)-\\vec{y}\\right) \\\\ &amp; \\approx 2 \\mathbf{J}^{}\\left(\\vec{f}\\left(\\mathbf{a}_{n}\\right)+\\mathbf{J}^{T} \\cdot\\left(\\mathbf{a}_{n+1}-\\mathbf{a}_{n}\\right)-\\vec{y}\\right)=0 \\end{aligned} \\] ​ 对上式整理可得： \\[ \\mathbf{a}_{n+1}=\\mathbf{a}_{n}-\\left(\\mathbf{JJ^{T}} \\right)^{-1} \\mathbf J \\cdot \\mathbf{r} \\\\ \\] \\[ \\underbrace{\\mathbf{JJ^{T}}}_{\\mathbf H}\\Delta \\mathbf{a} = \\underbrace{\\mathbf J \\cdot \\mathbf{r}}_{\\mathbf{g}} \\tag{3} \\] ​ 式(3)即是关于\\(\\Delta a\\)的线性方程组，成为增量方程。对比牛顿法，高斯牛顿法采用\\(\\mathbf{JJ^{T}}\\)作为\\(\\mathbf{H}\\)矩阵的近似，简化了海森矩阵的计算过程。同时将\\(\\mathbf{H}\\)矩阵展开后，可分解为各步\\(\\mathbf{J}_i\\)计算而得： \\[ \\mathbf H =\\mathbf{JJ^{T}} = \\sum_{i=1}^{N}\\mathbf{J}_i\\mathbf{J}_i^T \\] 步骤 给定初始值\\(\\mathbf a_0\\) 对于第k次迭代，求解出当前的雅可比矩阵\\(\\mathbf J\\)以及残差\\(\\mathbf r\\). 根据(3)式，求解增量方程\\(\\Delta \\mathbf a\\) 如果\\(\\Delta \\mathbf a\\)足够小，则停止。否则继续迭代。 实例 图1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// 开始Gauss-Newton迭代int iterations = 100; // 迭代次数double cost = 0, lastCost = 0; // 本次迭代的cost和上一次迭代的costfor (int iter = 0; iter &lt; iterations; iter++) &#123; Matrix3d H = Matrix3d::Zero(); // Hessian = J^T J in Gauss-Newton Vector3d b = Vector3d::Zero(); // bias cost = 0; for (int i = 0; i &lt; N; i++) &#123; double xi = x_data[i], yi = y_data[i]; // 第i个数据点 // start your code here double error = 0; // 第i个数据点的计算误差 error = yi - exp(ae * xi * xi + be * xi + ce);; // 填写计算error的表达式 Vector3d J; // 雅可比矩阵 J[0] = -xi * xi * exp(ae * xi * xi + be * xi + ce); // de/da J[1] = -xi * exp(ae * xi * xi + be * xi + ce); // de/db J[2] = -exp(ae * xi * xi + be * xi + ce); // de/dc H += J * J.transpose(); // GN近似的H b += -error * J; // end your code here cost += error * error; &#125; // 求解线性方程 Hx=b，建议用ldlt // start your code here Vector3d dx = H.ldlt().solve(b); // end your code here if (isnan(dx[0])) &#123; cout &lt;&lt; &quot;result is nan!&quot; &lt;&lt; endl; break; &#125; if (iter &gt; 0 &amp;&amp; cost &gt; lastCost) &#123; // 误差增长了，说明近似的不够好 cout &lt;&lt; &quot;cost: &quot; &lt;&lt; cost &lt;&lt; &quot;, last cost: &quot; &lt;&lt; lastCost &lt;&lt; endl; break; &#125; // 更新abc估计值 ae += dx[0]; be += dx[1]; ce += dx[2]; lastCost = cost; cout&lt;&lt;&quot;第&quot;&lt;&lt;iter&lt;&lt;&quot;次迭代结果&quot;&lt;&lt;&quot; a:&quot;&lt;&lt;ae&lt;&lt;&quot; b:&quot;&lt;&lt;be&lt;&lt;&quot; c:&quot;&lt;&lt;ce&lt;&lt;endl; // cout &lt;&lt; &quot;total cost: &quot; &lt;&lt; cost &lt;&lt; endl;&#125;","categories":[{"name":"数学","slug":"数学","permalink":"https://divenire.ltd/categories/%E6%95%B0%E5%AD%A6/"},{"name":"非线性优化","slug":"数学/非线性优化","permalink":"https://divenire.ltd/categories/%E6%95%B0%E5%AD%A6/%E9%9D%9E%E7%BA%BF%E6%80%A7%E4%BC%98%E5%8C%96/"}],"tags":[]}],"categories":[{"name":"SLAM","slug":"SLAM","permalink":"https://divenire.ltd/categories/SLAM/"},{"name":"14讲","slug":"SLAM/14讲","permalink":"https://divenire.ltd/categories/SLAM/14%E8%AE%B2/"},{"name":"ORB-SLAM2","slug":"SLAM/ORB-SLAM2","permalink":"https://divenire.ltd/categories/SLAM/ORB-SLAM2/"},{"name":"Cate","slug":"Cate","permalink":"https://divenire.ltd/categories/Cate/"},{"name":"SubCate","slug":"Cate/SubCate","permalink":"https://divenire.ltd/categories/Cate/SubCate/"},{"name":"数学","slug":"数学","permalink":"https://divenire.ltd/categories/%E6%95%B0%E5%AD%A6/"},{"name":"非线性优化","slug":"数学/非线性优化","permalink":"https://divenire.ltd/categories/%E6%95%B0%E5%AD%A6/%E9%9D%9E%E7%BA%BF%E6%80%A7%E4%BC%98%E5%8C%96/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://divenire.ltd/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://divenire.ltd/tags/Blog/"}]}